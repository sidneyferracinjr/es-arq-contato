Aplicando princípios SOLID no sistema de gerenciamento de contatos

1. Princípio da Responsabilidade Única (SRP)

O princípio da Responsabilidade Única (SRP) afirma que cada classe deve ter apenas uma única responsabilidade. No sistema em questão, a classe GerenciadorContatos possui diversas responsabilidades, como adicionar contatos, remover contatos, listar contatos e buscar contatos. Isso viola o princípio SRP, pois torna a classe complexa e difícil de manter.

Para aplicar o SRP, podemos dividir a classe GerenciadorContatos em classes menores e mais específicas, cada uma com uma única responsabilidade. Por exemplo, podemos criar as seguintes classes:

ContatoService: Responsável por adicionar, remover e listar contatos.
BuscaService: Responsável por buscar contatos por nome ou e-mail.
2. Princípio da Abertura/Fechamento (OCP)

O princípio da Abertura/Fechamento (OCP) afirma que as classes devem estar abertas para extensões, mas fechadas para modificações. No sistema em questão, a classe GerenciadorContatos é fechada para extensões, pois não é possível adicionar novas estratégias de busca sem modificar a classe. Isso viola o princípio OCP, pois torna o sistema rígido e difícil de adaptar a novas necessidades.

Para aplicar o OCP, podemos utilizar interfaces para definir as responsabilidades das classes de serviço. As classes de serviço podem então implementar essas interfaces e fornecer suas próprias implementações para as operações de contato. Isso permite que novas estratégias de busca sejam adicionadas ao sistema sem modificar as classes existentes.

3. Princípio da Segregação de Interface (ISP)

O princípio da Segregação de Interface (ISP) afirma que os clientes não devem ser forçados a depender de interfaces que não utilizam. No sistema em questão, a interface IContatoService define as operações de adicionar, remover, listar e buscar contatos. No entanto, a classe BuscaPorEmailStrategy só utiliza a operação de buscar contatos por e-mail. Isso viola o princípio ISP, pois força a classe BuscaPorEmailStrategy a implementar operações que não utiliza.

Para aplicar o ISP, podemos criar interfaces separadas para cada operação de contato. As classes de serviço podem então implementar apenas as interfaces que realmente utilizam. Isso torna o sistema mais flexível e facilita o reuso de código.